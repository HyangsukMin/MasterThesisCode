#!/home/hmin/anaconda3/envs/tensor-gpu/bin/python3.8

def main(args):
    import argparse, pickle, logging
    import numpy as np
    from tf_gpu import set_gpu


    from utils import *
    from models import TTC
#    import matplotlib.pyplot as plt
#    import matplotlib as mpl
#    from matplotlib import cm
#    import matplotlib.patches as mpatches
#    
#    %matplotlib inline
#    plt.rcParams['axes.facecolor'] = 'white'
#    plt.rcParams['xtick.color'] = 'white'
#    plt.rcParams['ytick.color'] = 'white'
#    plt.style.use('seaborn')

    # ----------------------------------------------- #1
    # GPU setting
    # ----------------------------------------------- #
    set_gpu(args.gpu_num)


    # ----------------------------------------------- #1
    # Log setting
    # ----------------------------------------------- #
    logger = logging.getLogger() # 로그 생성
    logger.setLevel(logging.INFO) # 로그의 출력 기준 설정
    stream_handler = logging.StreamHandler()
    logger.addHandler(stream_handler)
    stream_handler.setFormatter(logging.Formatter('%(message)s'))
    logFilename = "../log/%s_%s_%s_w%d_o%s.log" % (args["dataset"], args["encoder"], args["decoder"], args["window"], str(args["shift"]))
    print("\nOPEN LOG FILE {}\n".format(logFilename)) 
    file_handler = logging.FileHandler(filename = logFilename)
    logger.addHandler(file_handler)
    file_handler.setFormatter(logging.Formatter('%(levelname)s: %(asctime)s - %(name)s -  - %(message)s'))

    # ----------------------------------------------- #1
    # Dataset parameter setting
    # ----------------------------------------------- #
    if args.dataset == "harsc":
        filename = "../datasets/HARSC/1.pkl"
    elif args..dataset == "mhealth":
        filename = "../datasets/mHealth/mHealth_subject1.pkl"
    elif args..dataset == "PAMAP2":
        filename = "../datasets/PAMAP2/subject108.pkl"
    elif args..dataset == "HAPT":
        filename = "../datasets/HAPT/hapt1_1.pkl"
    
    # ----------------------------------------------- #
    # Dataset load
    # ----------------------------------------------- #
    data_X, data_y = pickle.load(open(filename,"rb"))
    # 0plt.plot(data_y)
    
    data_y = relable(data_y)
    n_ts, n_dim = data_X.shape
    n_clusters = len(np.unique(data_y))
    print("Training data size:", data_X.shape, data_y.shape)
    
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog="train", description='TTC')

    ## TTC
    parser.add_argument('--gpu_num', type = int, required = True, choices = range(6))
    parser.add_argument('--dataset', type = str, required = True, default = "hapt", choices = ["harsc","hapt","mhealth","pamap2","EMG"])
    parser.add_argument('--window', type = int, required = True, default = 512)
    parser.add_argument('--shift', type = int, required = True, default = 512)
#    parser.add_argument('--clustering', type = str, default = 'ticc', chocies = ["ticc", "gmm"])
    parser.add_argument('--lr', type = float, default = 1e-3)
    parser.add_argument('--optimizer', type = str, default = "Adam")
    parser.add_argument('--epochs', type = int, default = 10)
    parser.add_argument('--batch_size', type = int, default = 32)
#    parser.add_argument('--maxIters', type = int, default = 5)
    parser.add_argument('--beta', type = int, default = 1)

    ## AE
    parser.add_argument('--activation', type = str, default = "nrelu", choices = ["relu","nrelu"])

    ### ATTN
    parser.add_argument('--n_head', type = int, default = 8)

    ### TCN
    parser.add_argument('--filters', type = int, default = 64)
    parser.add_argument('--kernel_size', type = int, default = 3)
    parser.add_argument('--n_latent', type = int, default = 20)
    parser.add_argument('--padding', type = str, default = 'causal')
    parser.add_argument('--dilation_exp', type = int, default = 2)
    parser.add_argument('--num_dilation', type = int, default = 3)
    parser.add_argument('--dropout_rate', type = float, default = 0.5)
    
    arguments = parser.parse_args()
    args = {}
    for arg in vars(arguments):
        args[arg] = getattr(arguments, arg)

    print(args)
    main(args)
    
